package net.malwarehub.twitter_notifier;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.IBinder;
import android.preference.PreferenceManager;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import twitter4j.Paging;
import twitter4j.ResponseList;
import twitter4j.StallWarning;
import twitter4j.StatusDeletionNotice;
import twitter4j.StatusListener;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;
import twitter4j.User;
import twitter4j.UserList;
import twitter4j.UserStreamListener;
import twitter4j.conf.Configuration;
import twitter4j.conf.ConfigurationBuilder;
import twitter4j.DirectMessage;

public class DirectMessageService extends Service {
    @Override
    public IBinder onBind(Intent intent) {
        throw new UnsupportedOperationException("not implemented");
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        new DirectMessageTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
        return START_STICKY;
    }

    private class DirectMessageTask extends AsyncTask<Void, Void, Void> {
        private final static long RETRY_INTERVAL = 60000;
        private final static long POLL_INTERVAL = 600000;
        private final static String SINCE_ID = "since_id";

        private SharedPreferences preferences;
        private ConnectivityManager connectivityManager;
        private Twitter twitter;
        private TwitterStream twitterStream;
        private long userId;

        private Configuration getConfiguration() {
            Resources resources = getResources();

            return new ConfigurationBuilder()
                    .setOAuthConsumerKey(resources.getString(R.string.consumerKey))
                    .setOAuthConsumerSecret(resources.getString(R.string.consumerSecret))
                    .setOAuthAccessToken(resources.getString(R.string.accessToken))
                    .setOAuthAccessTokenSecret(resources.getString(R.string.accessTokenSecret)).build();
        }

        private boolean hasNetworkConnection() {
            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();

            if (networkInfo == null) {
                return false;
            }

            return networkInfo.isConnected();
        }

        private void sleep(long time) {
            try {
                Thread.sleep(time);
            } catch (InterruptedException e) {
            }
        }

        protected void onPreExecute () {
            Configuration configuration = getConfiguration();
            Context context = getBaseContext();

            this.preferences = PreferenceManager.getDefaultSharedPreferences(context);
            this.connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
            this.twitter = new TwitterFactory(configuration).getInstance();
            this.twitterStream = new TwitterStreamFactory(configuration).getInstance();
        }

        @Override
        protected Void doInBackground(Void... params) {
            while (true) {
                if (hasNetworkConnection()) {
                    try {
                        userId = this.twitter.getId();
                        break;
                    } catch (TwitterException e) {
                        e.printStackTrace();
                    }
                }

                sleep(RETRY_INTERVAL);
            }

            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... o) {
                    ResponseList<DirectMessage> directMessages;
                    DirectMessage directMessage;
                    Paging paging;
                    long sinceId;

                    while (true) {
                        sinceId = preferences.getLong(SINCE_ID, -1);

                        if (sinceId == -1 || !hasNetworkConnection()) {
                            sleep(RETRY_INTERVAL);
                            continue;
                        }

                        paging = new Paging();
                        paging.setSinceId(sinceId);

                        try {
                            directMessages = twitter.getDirectMessages(paging);

                            if (directMessages.size() > 0) {
                                directMessage = directMessages.get(0);
                                preferences.edit().putLong(SINCE_ID, directMessage.getId()).apply();

                                if (directMessage.getSender().getId() != userId) {
                                    new DirectMessageDisplayer(directMessage).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
                                }
                            }
                        } catch (TwitterException e) {
                            e.printStackTrace();
                        }

                        sleep(POLL_INTERVAL);
                    }
                }
            }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);

            StatusListener listener = new UserStreamListener() {
                @Override
                public void onDeletionNotice(long l, long l2) {

                }

                @Override
                public void onFriendList(long[] longs) {

                }

                @Override
                public void onFavorite(User user, User user2, twitter4j.Status status) {

                }

                @Override
                public void onUnfavorite(User user, User user2, twitter4j.Status status) {

                }

                @Override
                public void onFollow(User user, User user2) {

                }

                @Override
                public void onUnfollow(User user, User user2) {

                }

                @Override
                public void onDirectMessage(DirectMessage directMessage) {
                    preferences.edit().putLong(SINCE_ID, directMessage.getId()).apply();

                    if (directMessage.getSender().getId() != userId) {
                        new DirectMessageDisplayer(directMessage).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
                    }
                }

                @Override
                public void onUserListMemberAddition(User user, User user2, UserList userList) {

                }

                @Override
                public void onUserListMemberDeletion(User user, User user2, UserList userList) {

                }

                @Override
                public void onUserListSubscription(User user, User user2, UserList userList) {

                }

                @Override
                public void onUserListUnsubscription(User user, User user2, UserList userList) {

                }

                @Override
                public void onUserListCreation(User user, UserList userList) {

                }

                @Override
                public void onUserListUpdate(User user, UserList userList) {

                }

                @Override
                public void onUserListDeletion(User user, UserList userList) {

                }

                @Override
                public void onUserProfileUpdate(User user) {

                }

                @Override
                public void onUserSuspension(long l) {

                }

                @Override
                public void onUserDeletion(long l) {

                }

                @Override
                public void onBlock(User user, User user2) {

                }

                @Override
                public void onUnblock(User user, User user2) {

                }

                @Override
                public void onStatus(twitter4j.Status status) {

                }

                @Override
                public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {

                }

                @Override
                public void onTrackLimitationNotice(int i) {

                }

                @Override
                public void onScrubGeo(long l, long l2) {

                }

                @Override
                public void onStallWarning(StallWarning stallWarning) {

                }

                @Override
                public void onException(Exception e) {
                    e.printStackTrace();
                }
            };

            twitterStream.addListener(listener);
            twitterStream.user();

            return null;
        }

        private class DirectMessageDisplayer extends AsyncTask<Void, Void, Bitmap> {
            private DirectMessage directMessage;

            public DirectMessageDisplayer(DirectMessage directMessage) {
                super();
                this.directMessage = directMessage;
            }

            @Override
            protected Bitmap doInBackground(Void... o) {
                InputStream in;

                try {
                    URL url = new URL(directMessage.getSender().getOriginalProfileImageURLHttps());

                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setDoInput(true);
                    connection.connect();
                    in = connection.getInputStream();

                    return BitmapFactory.decodeStream(in);
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                return null;
            }

            @Override
            protected void onPostExecute(Bitmap profileImage) {
                super.onPostExecute(profileImage);

                try {
                    NotificationManager notificationManager =
                            (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

                    Notification notification = new Notification.Builder(getBaseContext())
                            .setContentTitle("@" + directMessage.getSenderScreenName())
                            .setContentText(directMessage.getText())
                            .setSmallIcon(R.drawable.twitter_logo)
                            .setLargeIcon(profileImage)
                            .setDefaults(Notification.DEFAULT_VIBRATE | Notification.DEFAULT_LIGHTS)
                            .build();

                    notificationManager.notify(
                            (int) directMessage.getId(),
                            notification);


                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}